openapi: 3.0.0
info:
  title: ITVibe API
  version: 1.0.0
  description: API fir ITVibe Application.

paths:
  /healthcheck:
    get:
      x-amazon-apigateway-integration:
        uri: "${health_check_lambda_invoke_arn}"
        httpMethod: POST
        type: aws_proxy
      summary: Get health check
      responses:
        "200":
          description: Back-end status, version and env
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "UP"
                  version:
                    type: string
                    example: "0.0.1"
                  env:
                    type: string
                    example: "prod"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /companies:
    get:
      x-amazon-apigateway-integration:
        uri: "${get_companies_lambda_invoke_arn}"
        httpMethod: POST
        type: aws_proxy
      summary: List all companies
      responses:
        "200":
          description: A list of companies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Company"
    options:
      summary: Preflight CORS check
      responses:
        "204":
          description: No Content
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: "POST, GET, OPTIONS"
            Access-Control-Allow-Headers:
              schema:
                type: string
                example: "Content-Type, Authorization"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 204}'
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'POST, GET, OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, Authorization'"
    post:
      x-amazon-apigateway-integration:
        uri: "${create_company_lambda_invoke_arn}"
        httpMethod: POST
        type: aws_proxy
      summary: Create or update a company
      security:
        - itvibe-authorizer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Company"
      responses:
        "201":
          description: The created company
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Company"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /companies/{id}:
    get:
      x-amazon-apigateway-integration:
        uri: "${get_company_details_by_id_lambda_invoke_arn}"
        httpMethod: POST
        type: aws_proxy
      summary: Get a company by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The company details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Company"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Company not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      x-amazon-apigateway-integration:
        uri: "${delete_company_by_id_lambda_invoke_arn}"
        httpMethod: POST
        type: aws_proxy
      summary: Delete a company by ID
      security:
        - itvibe-authorizer: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Company deleted successfully
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Company not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      x-amazon-apigateway-integration:
        uri: "${patch_company_lambda_invoke_arn}"
        httpMethod: POST
        type: aws_proxy
      summary: Update a company by ID
      security:
        - itvibe-authorizer: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchCompanyRequest"
      responses:
        200:
          description: The updated company
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Company updated successfully"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Company not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /companies/{id}/metrics:
    get:
      x-amazon-apigateway-integration:
        uri: "${get_company_metrics_lambda_invoke_arn}"
        httpMethod: POST
        type: aws_proxy
      summary: Get company metrics by ID, Metrics include review count, average rating, etc.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "aefb1b1b-1b1b-1b1b-1b1b-1b1b1b1b1b1b"
      responses:
        "200":
          description: The company metrics
          content:
            application/json:
              schema:
                type: object
                properties:
                  review_count:
                    description: The number of reviews for the company
                    type: number
                    example: 1000000
                  average_rating:
                    description: The average rating of the company, between 0 and 10
                    type: number
                    example: 4.9
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Company not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /reviews:
    options:
      summary: Preflight CORS check
      responses:
        "204":
          description: No Content
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: "POST, GET, OPTIONS"
            Access-Control-Allow-Headers:
              schema:
                type: string
                example: "Content-Type, Authorization"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 204}'
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'POST, GET, OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, Authorization'"
    get:
      x-amazon-apigateway-integration:
        uri: "${get_reviews_by_company_id_lambda_invoke_arn}"
        httpMethod: POST
        type: aws_proxy
      summary: List all reviews for a company
      parameters:
        - name: companyId
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A list of reviews for a company
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Review"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Company not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      x-amazon-apigateway-integration:
        uri: "${add_review_lambda_invoke_arn}"
        httpMethod: POST
        type: aws_proxy
      summary: Create a review
      security:
        - itvibe-authorizer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddReviewRequest"
      responses:
        "201":
          description: The created review
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateReviewResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"


  /contact:
    options:
      summary: Preflight CORS check for contact messages
      responses:
        "204":
          description: No Content
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: "POST, GET, OPTIONS"
            Access-Control-Allow-Headers:
              schema:
                type: string
                example: "Content-Type, Authorization"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 204}'
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'POST, GET, OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, Authorization'"
    get:
      x-amazon-apigateway-integration:
        uri: "${get_contact_messages_lambda_invoke_arn}"
        httpMethod: POST
        type: aws_proxy
      summary: List all contact messages
      security:
        - itvibe-authorizer: []
      parameters:
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum:
              - NEW
              - IN_PROGRESS
              - DONE
              - ARCHIVED
        - name: pageSize
          in: query
          required: false
          schema:
            type: integer
        - name: startKey
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: list of contact messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GetContactMessageResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      x-amazon-apigateway-integration:
        uri: "${push_contact_message_lambda_invoke_arn}"
        httpMethod: POST
        type: aws_proxy
      summary: Push a contact message
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContactMessage"
      responses:
        "201":
          description: The contact message is pushed with success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactMessageResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /contact/{id}:
    options:
      summary: Preflight CORS check for contact messages
      responses:
        "204":
          description: No Content
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: "OPTIONS, PATCH"
            Access-Control-Allow-Headers:
              schema:
                type: string
                example: "Content-Type, Authorization"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 204}'
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS, PATCH'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, Authorization'"
    patch:
      x-amazon-apigateway-integration:
        uri: "${patch_contact_message_lambda_invoke_arn}"
        httpMethod: POST
        type: aws_proxy
      summary: Update a contact message
      security:
        - itvibe-authorizer: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "aefb1b1b-1b1b-1b1b-1b1b-1b1b1b1b1b1b"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: "NEW"
                  description: The status code of the contact message
                  enum:
                    - NEW
                    - IN_PROGRESS
                    - DONE
                    - ARCHIVED
              required:
                - status
      responses:
        "200":
          description: The contact message is updated with success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Message updated with success"
                  id:
                    type: string
                    example: "aefb1b1b-1b1b-1b1b-1b1b-1b1b1b1b1b1b"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  securitySchemes:
    itvibe-authorizer:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        type: cognito_user_pools
        identitySource: method.request.header.Authorization
        providerARNs:
          - arn:aws:cognito-idp:eu-west-3:327441465709:userpool/eu-west-3_L4u8gixpA
  schemas:
    Company:
      type: object
      required:
        - name
        - description
        - siren
        - siret
        - president
        - adress
        - country
        - industry
      properties:
        id:
          type: string
          example: "aefb1b1b-1b1b-1b1b-1b1b-1b1b1b1b1b1b"
        name:
          type: string
          example: "ITVibe"
        location:
          type: string
          example: "Paris"
        size:
          type: number
          example: 100
        revenue:
          type: number
          example: 1000000
        industry:
          type: string
          example: "IT"
        description:
          type: string
          example: "IT company"
        creationDate:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        country:
          type: string
          example: "France"
        siret:
          type: string
          example: "12345678901234"
        siren:
          type: string
          example: "123456789"
        IBAN:
          type: string
          example: "FR7612345678901234567890123"
    PatchCompanyRequest:
      type: object
      properties:
        name:
          type: string
          example: "ITVibe"
        size:
          type: number
          example: 100
        revenue:
          type: number
          example: 1000000
        industry:
          type: string
          example: "IT"
        creationDate:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        country:
          description: The country of the company in ISO 3166-1 alpha-2 format
          type: string
          example: "France"
          maxLength: 2
        siret:
          type: string
          example: "12345678901234"
        siren:
          type: string
          example: "123456789"
    Review:
      type: object
      required:
        - id
        - companyId
        - rating
        - comment
      properties:
        id:
          type: string
          example: "aefb1b1b-1b1b-1b1b-1b1b-1b1b1b1b1b1b"
        companyId:
          type: string
          example: "aefb1b1b-1b1b-1b1b-1b1b-1b1b1b1b1b1b"
        rating:
          type: number
          example: 5
        comment:
          type: string
          example: "Great company"
    ContactMessage:
      type: object
      required:
        - email
        - content
      properties:
        email:
          type: string
          example: "jhon.dohe@company.com"
        content:
          type: string
          example: "Hello, I would like to know more about your company"
    PushContactMessageResponse:
      type: object
      properties:
        message:
          type: string
          example: "Message sent with success"
        id:
          type: string
          example: "aefb1b1b-1b1b-1b1b-1b1b-1b1b1b1b1b1b"
    GetContactMessageResponse:
      type: object
      properties:
        id:
          type: string
          example: "aefb1b1b-1b1b-1b1b-1b1b-1b1b1b1b1b1b"
        email:
          type: string
          example: "jhon.dohe@test.com"
        content:
          type: string
          example: "Lerum ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur."
        status:
          enum:
            - "NEW"
            - "IN_PROGRESS"
            - "DONE"
            - "ARCHIVED"
        timestamp:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
    AddReviewRequest:
      type: object
      required:
        - company_id
        - rating
        - comment
        - author
      properties:
        company_id:
          type: string
        rating:
          type: integer
        comment:
          type: string
        author:
          type: string
    CreateReviewResponse:
      type: object
      required:
        - company_id
        - review_id
        - rating
        - comment
        - author
      properties:
        company_id:
          type: string
        review_id:
          type: string
        rating:
          type: integer
        comment:
          type: string
        author:
          type: string
    Error:
      type: object
      properties:
        message:
          type: string
        code:
          type: integer
